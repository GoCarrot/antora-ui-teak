version: 2.1

parameters:
  build_type:
    type: enum
    default: "development"
    enum: ["development", "production"]
  sdk_version:
    type: string
    default: "develop"

orbs:
  aws-cli: circleci/aws-cli@2.0.6
  teak: teak/buildomat@0.1

jobs:
  build:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-v3-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v3-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Build UI Bundle
          command: npx gulp bundle
      - run:
          name: Install Doxygen
          command: |
            sudo apt-get update
            sudo apt-get install doxygen
      - build_sdk_docs:
          sdk: teak-unity
          ref: << pipeline.parameters.sdk_version >>
      - build_sdk_docs:
          sdk: teak-ios
          ref: << pipeline.parameters.sdk_version >>
      - build_sdk_docs:
          sdk: teak-android
          ref: << pipeline.parameters.sdk_version >>
      - run:
          name: Build Docs
          command: npx antora playbook/antora-playbook.yml
      - persist_to_workspace:
          root: .
          paths:
            - build/*
            - terraform/*
            - playbook/build/*

  deploy:
    docker:
      - image: cimg/node:lts
        environment:
          AWS_REGION=us-east-1
    steps:
      - aws-cli/setup
      - buildomat/terraform-install:
          version: 1.0.5
      - attach_workspace:
          at: .
      - buildomat/aws-oidc-assume
      - buildomat/terraform-init:
          path: terraform
      - buildomat/terraform-output:
          path: terraform
          workspace: << pipeline.parameters.build_type >>
      - run:
          name: Deploy to << pipeline.parameters.build_type >>
          command: |
            cd playbook/build/site
            sha512sum index.html
            eval $(aws sts assume-role --role-arn ${TF_OUT_UPLOAD_ROLE_ARN} --role-session-name docs | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport AWS_SESSION_TOKEN=\(.SessionToken)\n"')
            aws s3 sync . s3://${TF_OUT_DOCS_BUCKET_NAME} --delete --exclude=robots.txt
            INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${TF_OUT_CLOUDFRONT_DISTRIBUTION_ID} --paths "/*" --query Invalidation.Id --output text)
            echo "Created CF Invalidation ${INVALIDATION_ID}"
            while true; do
              sleep 15
              INVALIDATION_STATUS=$(aws cloudfront get-invalidation --distribution-id ${TF_OUT_CLOUDFRONT_DISTRIBUTION_ID} --id ${INVALIDATION_ID} --query Invalidation.Status --output text)
              echo "Invalidation is ${INVALIDATION_STATUS}"
              if ! [ $INVALIDATION_STATUS = "InProgress" ]; then
                break
              fi
            done

workflows:
  version: 2

  build:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - deploy:
          context:
            - AWS-OIDC-Role
          requires:
            - build
          filters:
            tags:
              ignore: /.*/

commands:
  build_sdk_docs:
    description: "Check out the correct version of SDK docs and generate API documentation"
    parameters:
      sdk:
        type: string
      ref:
        type: string
    steps:
      - run:
          name: Build docs for << parameters.sdk >> (<< parameters.ref >>)
          command: |
            cd ..
            git clone https://github.com/GoCarrot/<< parameters.sdk >>.git
            cd << parameters.sdk >>
            git checkout << parameters.ref >>
            yarn
            yarn docs
